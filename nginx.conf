env SQUID_PROXY_HOST;
env TARGET_HOST;
env VIRTUAL_HOST;
env MAX_BODY_SIZE;
events {
    worker_connections 1024; # Указывает максимальное количество подключений на один рабочий процесс
}

http {
    server {
        listen 80;
        server_name os.getenv("VIRTUAL_HOST");
        client_body_timeout 60s;
        send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;
        client_max_body_size 100m;
        client_body_buffer_size 1m;
        client_body_temp_path /tmp/client_body;
        proxy_buffer_size 16k;
        proxy_buffers 8 16k;
        resolver 127.0.0.11 valid=300s;

        location / {
            # Используем Lua для формирования запроса с полным URL
            content_by_lua_block {
                local http = require "resty.http"
                local httpc = http.new()

                -- Задаем целевой URL и адрес Squid из переменных окружения
                local target_url = os.getenv("TARGET_HOST")
                local squid_proxy = os.getenv("SQUID_PROXY_HOST")

                httpc:set_proxy_options({http_proxy = squid_proxy})

                -- Проверяем метод запроса
                local method = ngx.req.get_method()
                local body = nil

                if method == "POST" or method == "PUT" then
                    ngx.req.read_body() -- Считываем тело запроса
                    body = ngx.req.get_body_data()
                    
                    if not body then
                        local body_file = ngx.req.get_body_file()
                        if body_file then
                            local file = io.open(body_file, "rb")
                            if file then
                                body = file:read("*all")
                                file:close()
                            else
                                ngx.log(ngx.ERR, "Failed to open temporary body file: ", body_file)
                            end
                        else
                            ngx.log(ngx.ERR, "No body data and no temporary body file available.")
                        end
                    end
                end

                -- Выполняем запрос через Squid
                local res, err = httpc:request_uri(target_url, {
                    method = method,
                    headers = {
                        ["Host"] = target_url,
                        ["X-Real-IP"] = ngx.var.remote_addr,
                        ["X-Forwarded-For"] = ngx.var.proxy_add_x_forwarded_for,
                        ["X-Forwarded-Proto"] = ngx.var.scheme,
                        ["Content-Type"] = ngx.var.content_type,
                    },
                    path = ngx.var.request_uri,
                    body = body,
                })

                if not res then
                    ngx.say("failed to request: ", err, "\n", target_url)
                    return
                end

                -- Возвращаем ответ от Squid клиенту
                ngx.status = res.status
                for k, v in pairs(res.headers) do
                    ngx.header[k] = v
                end
                ngx.say(res.body)
            }
        }
    }
}
